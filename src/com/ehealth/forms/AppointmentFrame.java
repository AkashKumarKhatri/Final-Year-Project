/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ehealth.forms;

import com.ehealth.dao.AppointmentDAO;
import com.ehealth.dao.EmployeeDAO;
import com.ehealth.dao.Impl.AppointmentDAOImpl;
import com.ehealth.dao.Impl.EmployeeDAOImpl;
import com.ehealth.dao.Impl.PatientDAOImpl;
import com.ehealth.dao.Impl.UserPermissionDAOImpl;
import com.ehealth.dao.PatientDAO;
import com.ehealth.dao.UserPermissionDAO;
import com.ehealth.models.AppointmentModel;
import com.ehealth.models.EmployeeModel;
import com.ehealth.models.PatientModel;
import com.ehealth.models.UserPermissionModel;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akash
 */
public class AppointmentFrame extends javax.swing.JFrame {

    private Integer patientId;
    private Integer appointmentId;
    private Integer doctorId;

    /**
     * Creates new form AppointmentFrame1
     */
    public AppointmentFrame() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int)screenSize.getWidth();
        int height = (int)screenSize.getHeight();
        setSize(width, height);
        setIcon();
        setTitle("Appointment Window");
        populatePatientTable();
        populateAppointmentTable();
        populateDoctorTable();
        btnAdd.setVisible(false);
        btnDelete.setVisible(false);
        btnUpdate.setVisible(false);
        checkPermissions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        PatientTablePanel = new javax.swing.JPanel();
        patientScroll1 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        appointmentTablePanel = new javax.swing.JPanel();
        patientScroll = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        testPatientPanel = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbPatient = new javax.swing.JLabel();
        lbDoctor = new javax.swing.JLabel();
        lbSymptom = new javax.swing.JLabel();
        lbDate1 = new javax.swing.JLabel();
        lbFeesStatus = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        appointmentDateCombo = new com.toedter.calendar.JDateChooser();
        comboFees = new javax.swing.JComboBox<>();
        txtSymptom = new javax.swing.JTextField();
        txtDoctorName = new javax.swing.JTextField();
        TestTablePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        lbBack = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lbLogout = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Appointment");

        backgroundPanel.setBackground(new java.awt.Color(29, 29, 29));
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PatientTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        PatientTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Doctor Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        PatientTablePanel.setOpaque(false);
        PatientTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        doctorTable.setToolTipText("Patient Records");
        doctorTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        doctorTable.setSelectionBackground(java.awt.Color.red);
        doctorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorTableMouseClicked(evt);
            }
        });
        patientScroll1.setViewportView(doctorTable);

        PatientTablePanel.add(patientScroll1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 630, 260));

        backgroundPanel.add(PatientTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 397, 650, 290));

        appointmentTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        appointmentTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Patient Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        appointmentTablePanel.setOpaque(false);
        appointmentTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        patientTable.setToolTipText("Patient Records");
        patientTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientTable.setSelectionBackground(java.awt.Color.red);
        patientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientTableMouseClicked(evt);
            }
        });
        patientScroll.setViewportView(patientTable);

        appointmentTablePanel.add(patientScroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 630, 260));

        backgroundPanel.add(appointmentTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 397, 650, 290));

        testPatientPanel.setBackground(new java.awt.Color(255, 255, 255));
        testPatientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Patient Appointment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        testPatientPanel.setOpaque(false);
        testPatientPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnReset.setBackground(java.awt.Color.white);
        btnReset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/reset.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        testPatientPanel.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 230, 160, 50));

        btnAdd.setBackground(java.awt.Color.white);
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/save.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        testPatientPanel.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, 160, 50));

        btnUpdate.setBackground(java.awt.Color.white);
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/update.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        testPatientPanel.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, 160, 50));

        btnDelete.setBackground(java.awt.Color.white);
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/delete.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        testPatientPanel.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 160, 50));

        lbPatient.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lbPatient.setForeground(new java.awt.Color(255, 255, 255));
        lbPatient.setText("Patient");
        testPatientPanel.add(lbPatient, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 80, 30));

        lbDoctor.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lbDoctor.setForeground(new java.awt.Color(255, 255, 255));
        lbDoctor.setText("Doctor");
        testPatientPanel.add(lbDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 80, 30));

        lbSymptom.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lbSymptom.setForeground(new java.awt.Color(255, 255, 255));
        lbSymptom.setText("Symptom");
        testPatientPanel.add(lbSymptom, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 80, 30));

        lbDate1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lbDate1.setForeground(new java.awt.Color(255, 255, 255));
        lbDate1.setText("Date");
        testPatientPanel.add(lbDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 80, 30));

        lbFeesStatus.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lbFeesStatus.setForeground(new java.awt.Color(255, 255, 255));
        lbFeesStatus.setText("Fees Status");
        testPatientPanel.add(lbFeesStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 80, 30));

        txtPatientName.setEditable(false);
        txtPatientName.setEnabled(false);
        txtPatientName.setFocusable(false);
        testPatientPanel.add(txtPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 170, 30));

        appointmentDateCombo.setBackground(backgroundPanel.getBackground());
        appointmentDateCombo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        testPatientPanel.add(appointmentDateCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 170, 30));

        comboFees.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----Select----", "PAID", "UNPAID" }));
        testPatientPanel.add(comboFees, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 230, 170, 30));
        testPatientPanel.add(txtSymptom, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 170, 30));

        txtDoctorName.setEditable(false);
        txtDoctorName.setEnabled(false);
        txtDoctorName.setFocusable(false);
        testPatientPanel.add(txtDoctorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 170, 30));

        backgroundPanel.add(testPatientPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 520, 310));

        TestTablePanel.setBackground(new java.awt.Color(255, 255, 255));
        TestTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Appointment Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        TestTablePanel.setForeground(new java.awt.Color(255, 255, 255));
        TestTablePanel.setOpaque(false);
        TestTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        appointmentTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appointmentTable.setSelectionBackground(java.awt.Color.red);
        appointmentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        appointmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(appointmentTable);

        TestTablePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 760, 280));

        backgroundPanel.add(TestTablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 780, 310));

        lbBack.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbBack.setForeground(new java.awt.Color(255, 255, 255));
        lbBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Back_48px.png"))); // NOI18N
        lbBack.setText("   Back");
        lbBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbBackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbBackMouseExited(evt);
            }
        });
        backgroundPanel.add(lbBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 140, 60));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Google_Calendar_48px.png"))); // NOI18N
        jLabel8.setText("Appointments");
        backgroundPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 360, 50));

        lbLogout.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbLogout.setForeground(new java.awt.Color(255, 255, 255));
        lbLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Export_48px_4.png"))); // NOI18N
        lbLogout.setText("Logout");
        lbLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbLogout.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lbLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLogoutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbLogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbLogoutMouseExited(evt);
            }
        });
        backgroundPanel.add(lbLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 10, 140, 60));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Copyright © 2018 Geeks. All rights reserved");
        backgroundPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 688, 240, -1));

        getContentPane().add(backgroundPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void patientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientTableMouseClicked
        txtPatientName.setText((String) patientTable.getValueAt(patientTable.getSelectedRow(), 1));
        patientId = (Integer) patientTable.getValueAt(patientTable.getSelectedRow(), 0);
    }//GEN-LAST:event_patientTableMouseClicked

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clearFields();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if((txtPatientName.getText().trim().isEmpty()) || (txtDoctorName.getText().trim().isEmpty()) || 
                (comboFees.getSelectedIndex()==0) || (txtSymptom.getText().trim().isEmpty()) || (appointmentDateCombo.getDate() == null) ) {
            JOptionPane.showMessageDialog(rootPane, "Please Fill Fields");
        }else {
            AppointmentModel appointmentModel = new AppointmentModel();
            PatientDAO patientDAO = new PatientDAOImpl();
            PatientModel patientModel = patientDAO.getPatientIdWithName(txtPatientName.getText());
            appointmentModel.setPatientModel(patientModel);
            EmployeeDAO employeeDAO = new EmployeeDAOImpl();
            EmployeeModel employeeModel = employeeDAO.getEmployeeIdWithName(txtDoctorName.getText());
            appointmentModel.setEmployeeModel(employeeModel);
            appointmentModel.setFeesStatus(comboFees.getSelectedItem().toString());
            appointmentModel.setSymptom(txtSymptom.getText());
            appointmentModel.setCreatedBy(1);
            Date date = new Date();
            date = appointmentDateCombo.getDate();
            appointmentModel.setAppointmentDate(new Timestamp(date.getTime()));
            AppointmentDAO appointmentDAO = new AppointmentDAOImpl();
            int row = appointmentDAO.addAppointment(appointmentModel);
            if(row>0) {
                txtDoctorName.setText(null);
                txtPatientName.setText(null);
                txtSymptom.setText(null);
                comboFees.setSelectedIndex(0);
                appointmentDateCombo.setDate(null);
                populateAppointmentTable();
            }
            else {
                JOptionPane.showMessageDialog(null, "Record Not ADDED");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if((txtPatientName.getText().trim().isEmpty()) || (txtDoctorName.getText().trim().isEmpty()) || 
                (comboFees.getSelectedIndex()==0) || (txtSymptom.getText().trim().isEmpty()) || (appointmentDateCombo.getDate() == null) ) {
            JOptionPane.showMessageDialog(rootPane, "Please Fill Fields");
        }else {
            AppointmentModel appointmentModel = new AppointmentModel();
            PatientDAO patientDAO = new PatientDAOImpl();
            PatientModel patientModel = patientDAO.getPatientIdWithName(txtPatientName.getText());
            appointmentModel.setPatientModel(patientModel);
            EmployeeDAO employeeDAO = new EmployeeDAOImpl();
            EmployeeModel employeeModel = employeeDAO.getEmployeeIdWithName(txtDoctorName.getText());
            appointmentModel.setEmployeeModel(employeeModel);
            appointmentModel.setFeesStatus(comboFees.getSelectedItem().toString());
            appointmentModel.setSymptom(txtSymptom.getText());
            appointmentModel.setAppointmentId(appointmentId);
            appointmentModel.setModifiedBy(1);
            Date date = appointmentDateCombo.getDate();
            appointmentModel.setAppointmentDate(new Timestamp(date.getTime()));
            AppointmentDAO appointmentDAO = new AppointmentDAOImpl();
            int row = appointmentDAO.updateAppointment(appointmentModel);
            if(row>0) {
                txtDoctorName.setText(null);
                txtPatientName.setText(null);
                txtSymptom.setText(null);
                comboFees.setSelectedIndex(0);
                appointmentDateCombo.setDate(null);
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
                populateAppointmentTable();
            }
            else {
                JOptionPane.showMessageDialog(null, "Record Not ADDED");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Integer confirm = JOptionPane.showConfirmDialog(rootPane, "Do you realy want to delete", "Delete", JOptionPane.YES_NO_OPTION);
        if(confirm == 0) {
            AppointmentModel appointmentModel = new AppointmentModel();
            appointmentModel.setAppointmentId(appointmentId);
            System.out.println(appointmentId);
            AppointmentDAO appointmentDAO = new AppointmentDAOImpl();
            int row = appointmentDAO.deleteAppointment(appointmentModel);
            if(row>0) {
                txtDoctorName.setText(null);
                txtPatientName.setText(null);
                txtSymptom.setText(null);
                comboFees.setSelectedIndex(0);
                appointmentDateCombo.setDate(null);
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
                populateAppointmentTable();
            }
            else {
                JOptionPane.showMessageDialog(null, "Record Not Deleted");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void lbBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbBackMouseClicked
        new MainFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbBackMouseClicked

    private void lbBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbBackMouseEntered
        lbBack.setLocation(lbBack.getX()-1,lbBack.getY());
    }//GEN-LAST:event_lbBackMouseEntered

    private void lbBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbBackMouseExited
        lbBack.setLocation(lbBack.getX()+1,lbBack.getY());
    }//GEN-LAST:event_lbBackMouseExited

    private void lbLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseClicked
        new LoginFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbLogoutMouseClicked

    private void lbLogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseEntered
        lbLogout.setLocation(lbLogout.getX()+1,lbLogout.getY());
    }//GEN-LAST:event_lbLogoutMouseEntered

    private void lbLogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseExited
        lbLogout.setLocation(lbLogout.getX()-1,lbLogout.getY());
    }//GEN-LAST:event_lbLogoutMouseExited

    private void appointmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentTableMouseClicked
        btnAdd.setEnabled(false);
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
        appointmentId = (Integer) appointmentTable.getValueAt(appointmentTable.getSelectedRow(), 0);
        AppointmentDAO appointmentDAO = new AppointmentDAOImpl();
        AppointmentModel appointmentModel = appointmentDAO.getAppointmentWithId(appointmentId);
        txtPatientName.setText(appointmentModel.getPatientModel().getName());
        txtDoctorName.setText(appointmentModel.getEmployeeModel().getName());
        comboFees.setSelectedItem(appointmentModel.getFeesStatus());
        txtSymptom.setText(appointmentModel.getSymptom());
        appointmentDateCombo.setDate(appointmentModel.getAppointmentDate());
    }//GEN-LAST:event_appointmentTableMouseClicked

    private void doctorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorTableMouseClicked
        txtDoctorName.setText((String) doctorTable.getValueAt(doctorTable.getSelectedRow(), 1));
        doctorId = (Integer) doctorTable.getValueAt(doctorTable.getSelectedRow(), 0);
        
    }//GEN-LAST:event_doctorTableMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AppointmentFrame().setVisible(true);
//            }
//        });
//    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("frameIcon.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PatientTablePanel;
    private javax.swing.JPanel TestTablePanel;
    private com.toedter.calendar.JDateChooser appointmentDateCombo;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JPanel appointmentTablePanel;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboFees;
    private javax.swing.JTable doctorTable;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbBack;
    private javax.swing.JLabel lbDate1;
    private javax.swing.JLabel lbDoctor;
    private javax.swing.JLabel lbFeesStatus;
    private javax.swing.JLabel lbLogout;
    private javax.swing.JLabel lbPatient;
    private javax.swing.JLabel lbSymptom;
    private javax.swing.JScrollPane patientScroll;
    private javax.swing.JScrollPane patientScroll1;
    private javax.swing.JTable patientTable;
    private javax.swing.JPanel testPatientPanel;
    private javax.swing.JTextField txtDoctorName;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtSymptom;
    // End of variables declaration//GEN-END:variables
    
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }
        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        return new DefaultTableModel(data, columnNames);
    }
    private void populateAppointmentTable() {  
        AppointmentDAO appointmentDAO = new AppointmentDAOImpl();
        ResultSet rs= appointmentDAO.getAllAppointmentsResultSet();
        DefaultTableModel dtm=null;
        try {
            dtm = buildTableModel(rs);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        appointmentTable.setModel(dtm);
    }
    private void populatePatientTable() {  
        PatientDAO patientDAO = new PatientDAOImpl();
        ResultSet rs= patientDAO.getAllPatientResultSet();
        DefaultTableModel dtm=null;
        try {
            dtm = buildTableModel(rs);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        patientTable.setModel(dtm);
    }
    private void populateDoctorTable() {  
        EmployeeDAO employeeDAO = new EmployeeDAOImpl();
        ResultSet rs = employeeDAO.getAllDoctorsResultSet();
        DefaultTableModel dtm=null;
        try {
            dtm = buildTableModel(rs);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        doctorTable.setModel(dtm);
    }

    private void clearFields() {
        txtDoctorName.setText(null);
        txtPatientName.setText(null);
        txtSymptom.setText(null);
        comboFees.setSelectedIndex(0);
        appointmentDateCombo.setDate(null);
        btnAdd.setEnabled(true);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        populateAppointmentTable();
        populateDoctorTable();
        populatePatientTable();
    }

    private void checkPermissions() {
        UserPermissionDAO permissionDAO = new UserPermissionDAOImpl();
        List<UserPermissionModel> permissionModels = permissionDAO.getAssignedPermissions(LoginFrame.userType);
        for (UserPermissionModel permissionModel : permissionModels) {
            if(permissionModel.getPermissionModel().getName().equals("ADD_APPOINTMENT")) {
                btnAdd.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("UPDATE_APPOINTMENT")) {
                btnUpdate.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("DELETE_APPOINTMENT")) {
                btnDelete.setVisible(true);
            }
        }
    }
    
}
