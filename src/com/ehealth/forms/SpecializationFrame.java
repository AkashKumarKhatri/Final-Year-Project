/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ehealth.forms;

import com.ehealth.dao.Impl.SpecializationDAOImpl;
import com.ehealth.dao.Impl.UserPermissionDAOImpl;
import com.ehealth.dao.SpecializationDAO;
import com.ehealth.dao.UserPermissionDAO;
import com.ehealth.models.SpecializationModel;
import com.ehealth.models.UserPermissionModel;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akash
 */
public class SpecializationFrame extends javax.swing.JFrame {

    private Integer specializationId;

    /**
     * Creates new form SpecializationFrame
     */
    public SpecializationFrame() {
        initComponents();
        setIcon();
        populateMyTable();
        btnAdd.setVisible(false);
        btnDelete.setVisible(false);
        btnUpdate.setVisible(false);
        checkPermissions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bloodGroupLabel = new javax.swing.JLabel();
        bloodGroupBar = new javax.swing.JSeparator();
        lbBloodGroup = new javax.swing.JLabel();
        txtSpecialization = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        specializationTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Specialization");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(29, 29, 29));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bloodGroupLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bloodGroupLabel.setForeground(new java.awt.Color(255, 255, 255));
        bloodGroupLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Paste_Special_32px.png"))); // NOI18N
        bloodGroupLabel.setText("Specialization Details");
        jPanel1.add(bloodGroupLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 30));
        jPanel1.add(bloodGroupBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 550, 10));

        lbBloodGroup.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbBloodGroup.setForeground(new java.awt.Color(255, 255, 255));
        lbBloodGroup.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbBloodGroup.setText("Specialization");
        jPanel1.add(lbBloodGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 100, 30));
        jPanel1.add(txtSpecialization, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 280, 30));

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Insert_24px.png"))); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 120, 30));

        btnUpdate.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Renew_24px_2.png"))); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 120, 120, 30));

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Delete_Document_24px.png"))); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 120, 120, 30));

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Reset_24px.png"))); // NOI18N
        btnClear.setText("RESET");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel1.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, 120, 30));

        tablePanel.setBackground(jPanel1.getBackground());
        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Specialization", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        tablePanel.setOpaque(false);
        tablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        specializationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        specializationTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        specializationTable.setFocusable(false);
        specializationTable.setSelectionBackground(java.awt.Color.red);
        specializationTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        specializationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                specializationTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(specializationTable);

        tablePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 510, 220));

        jPanel1.add(tablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 530, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 430));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(txtSpecialization.getText().trim().isEmpty() == true) {
            JOptionPane.showMessageDialog(rootPane, "Please Enter Specialization");
        }
        else {
            SpecializationModel specializationModel = new SpecializationModel();
            specializationModel.setCreatedBy(1);
            specializationModel.setSpecialization(txtSpecialization.getText());
            SpecializationDAO specializationDAO = new SpecializationDAOImpl();
            if(specializationDAO.isSpecializationAvailable(specializationModel) == true) {
                JOptionPane.showMessageDialog(rootPane, "Specialization is already exist");
            }
            else {
                int row = specializationDAO.addSpecialization(specializationModel);
                if(row>0) {
                    txtSpecialization.setText(null);
                    populateMyTable();
                }
                else {
                    JOptionPane.showMessageDialog(null, "Record Not Added");
                }
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if(txtSpecialization.getText().trim().isEmpty() == true) {
            JOptionPane.showMessageDialog(rootPane, "Please Enter Specialization");
        }
        else {
            SpecializationModel specializationModel = new SpecializationModel();
            specializationModel.setCreatedBy(1);
            specializationModel.setSpecialization(txtSpecialization.getText());
            specializationModel.setSpecializationId(specializationId);
            SpecializationDAO specializationDAO = new SpecializationDAOImpl();
            if(specializationDAO.isSpecializationAvailable(specializationModel) == true) {
                JOptionPane.showMessageDialog(rootPane, "Specialization is already exist");
            }
            else {
                int row = specializationDAO.updateSpecialization(specializationModel);
                if(row>0) {
                    txtSpecialization.setText(null);
                    btnAdd.setEnabled(true);
                    btnDelete.setEnabled(false);
                    btnUpdate.setEnabled(false);
                    populateMyTable();
                }
                else {
                    JOptionPane.showMessageDialog(null, "Record Not Updated");
                }
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Integer confirm = JOptionPane.showConfirmDialog(rootPane, "Do you realy want to delete", "Delete", JOptionPane.YES_NO_OPTION);
        if(confirm == 0) {
            SpecializationModel specializationModel = new SpecializationModel();
            specializationModel.setSpecializationId(specializationId);
            SpecializationDAO specializationDAO = new SpecializationDAOImpl();
            int row = specializationDAO.deleteSpecialization(specializationModel);
            if(row>0) {
                txtSpecialization.setText(null);
                populateMyTable();
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
            }
            else {
                JOptionPane.showMessageDialog(null, "Record Not DELETED");
            }
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtSpecialization.setText(null);
        btnAdd.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed

    private void specializationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_specializationTableMouseClicked
        btnAdd.setEnabled(false);
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
        specializationId = (Integer) specializationTable.getValueAt(specializationTable.getSelectedRow(), 0);
        SpecializationDAO specializationDAO = new SpecializationDAOImpl();
        SpecializationModel specializationModel = specializationDAO.getSpecializationWithId(specializationId);
        txtSpecialization.setText(specializationModel.getSpecialization());
    }//GEN-LAST:event_specializationTableMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SpecializationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SpecializationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SpecializationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SpecializationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SpecializationFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator bloodGroupBar;
    private javax.swing.JLabel bloodGroupLabel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbBloodGroup;
    private javax.swing.JTable specializationTable;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTextField txtSpecialization;
    // End of variables declaration//GEN-END:variables
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }
        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        return new DefaultTableModel(data, columnNames);
    }
    private void populateMyTable() {
       
        SpecializationDAO specializationDAO = new SpecializationDAOImpl();
        ResultSet rs= specializationDAO.getAllSpecializationResultSet();
        DefaultTableModel dtm=null;
        try {
            dtm = buildTableModel(rs);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        specializationTable.setModel(dtm);
    }
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("frameIcon.png")));
    }

    private void checkPermissions() {
        UserPermissionDAO permissionDAO = new UserPermissionDAOImpl();
        List<UserPermissionModel> permissionModels = permissionDAO.getAssignedPermissions(LoginFrame.userType);
        for (UserPermissionModel permissionModel : permissionModels) {
            if(permissionModel.getPermissionModel().getName().equals("ADD_SPECIALIZATION")) {
                btnAdd.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("UPDATE_SPECIALIZATION")) {
                btnUpdate.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("DELETE_SPECIALIZATION")) {
                btnDelete.setVisible(true);
            }
        }
    }
}
