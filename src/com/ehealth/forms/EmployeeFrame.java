/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ehealth.forms;

import com.ehealth.dao.BloodDAO;
import com.ehealth.dao.EmployeeDAO;
import com.ehealth.dao.EmployeeTypeDAO;
import com.ehealth.dao.Impl.BloodDAOImpl;
import com.ehealth.dao.Impl.EmployeeDAOImpl;
import com.ehealth.dao.Impl.EmployeeTypeDAOImpl;
import com.ehealth.dao.Impl.ShiftDAOImpl;
import com.ehealth.dao.Impl.SpecializationDAOImpl;
import com.ehealth.dao.Impl.UserPermissionDAOImpl;
import com.ehealth.dao.ShiftDAO;
import com.ehealth.dao.SpecializationDAO;
import com.ehealth.dao.UserPermissionDAO;
import com.ehealth.models.BloodModel;
import com.ehealth.models.EmployeeModel;
import com.ehealth.models.EmployeeTypeModel;
import com.ehealth.models.ShiftModel;
import com.ehealth.models.SpecializationModel;
import com.ehealth.models.UserPermissionModel;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akash
 */
public class EmployeeFrame extends javax.swing.JFrame {

    private Integer employeeId;
    
    /**
     * Creates new form EmployeeFrame
     */
    public EmployeeFrame() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int width = (int)screenSize.getWidth();
        int height = (int)screenSize.getHeight();
        setSize(width, height);
        setIcon();
        setTitle("Employee Form");
        populateMyTable();
        populateEmployeeTypeCombo();
        populateBloodGroupCombo();
        populateSpecializationCombo();
        populateShiftCombo();
        btnAdd.setVisible(false);
        btnDelete.setVisible(false);
        btnUpdate.setVisible(false);
        checkPermissions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        backgroundPanel = new javax.swing.JPanel();
        lbEmployeeName = new javax.swing.JLabel();
        txtEmployeeName = new javax.swing.JTextField();
        lbEmployeeCnic = new javax.swing.JLabel();
        txtEmployeeCnic = new javax.swing.JTextField();
        lbEmployeeContact = new javax.swing.JLabel();
        txtEmployeeContact = new javax.swing.JTextField();
        lbEmployeeGender = new javax.swing.JLabel();
        btnFemale = new javax.swing.JRadioButton();
        btnMale = new javax.swing.JRadioButton();
        lbEmployeeSalary = new javax.swing.JLabel();
        txtEmployeeSalary = new javax.swing.JTextField();
        lbEmployeeAddress = new javax.swing.JLabel();
        txtEmployeeFees = new javax.swing.JTextField();
        lbEmployeeType = new javax.swing.JLabel();
        employeeTypeCombo = new javax.swing.JComboBox<>();
        bloodGroupCombo = new javax.swing.JComboBox<>();
        lbEmployeeBloodGroup = new javax.swing.JLabel();
        lbEmployeeSpecialization = new javax.swing.JLabel();
        specializationCombo = new javax.swing.JComboBox<>();
        lbEmployeeType9 = new javax.swing.JLabel();
        shiftCombo = new javax.swing.JComboBox<>();
        lbEmployeeShift = new javax.swing.JLabel();
        lbEmployeeJoiningDate = new javax.swing.JLabel();
        tablePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        tablePanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        employeeTable1 = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lbEmployeeFees = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        joiningDateCombo = new com.toedter.calendar.JDateChooser();
        lbBack = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbLogout = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employee Registration");

        backgroundPanel.setBackground(new java.awt.Color(29, 29, 29));
        backgroundPanel.setToolTipText("");
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbEmployeeName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeName.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeName.setText("Employee Name*");
        backgroundPanel.add(lbEmployeeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 130, 30));
        backgroundPanel.add(txtEmployeeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 200, 30));

        lbEmployeeCnic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeCnic.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeCnic.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeCnic.setText("CNIC*");
        backgroundPanel.add(lbEmployeeCnic, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 130, 30));
        backgroundPanel.add(txtEmployeeCnic, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 220, 200, 30));

        lbEmployeeContact.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeContact.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeContact.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeContact.setText("Contact*");
        backgroundPanel.add(lbEmployeeContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 130, 30));
        backgroundPanel.add(txtEmployeeContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 200, 30));

        lbEmployeeGender.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeGender.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeGender.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeGender.setText("Gender");
        backgroundPanel.add(lbEmployeeGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 130, 30));

        btnFemale.setBackground(backgroundPanel.getBackground());
        buttonGroup1.add(btnFemale);
        btnFemale.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnFemale.setForeground(new java.awt.Color(255, 255, 255));
        btnFemale.setText("Female");
        backgroundPanel.add(btnFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 300, 90, -1));

        btnMale.setBackground(backgroundPanel.getBackground());
        buttonGroup1.add(btnMale);
        btnMale.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnMale.setForeground(new java.awt.Color(255, 255, 255));
        btnMale.setText("Male");
        backgroundPanel.add(btnMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 300, 90, -1));

        lbEmployeeSalary.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeSalary.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeSalary.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeSalary.setText("Salary*");
        backgroundPanel.add(lbEmployeeSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 130, 30));
        backgroundPanel.add(txtEmployeeSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, 200, 30));

        lbEmployeeAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeAddress.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeAddress.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeAddress.setText("Address");
        backgroundPanel.add(lbEmployeeAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 130, 30));
        backgroundPanel.add(txtEmployeeFees, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, 200, 30));

        lbEmployeeType.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeType.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeType.setText("Employee Type");
        backgroundPanel.add(lbEmployeeType, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, 130, 30));

        employeeTypeCombo.setBackground(backgroundPanel.getBackground());
        employeeTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---- Select ----" }));
        employeeTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeTypeComboActionPerformed(evt);
            }
        });
        backgroundPanel.add(employeeTypeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 180, 210, 30));

        bloodGroupCombo.setBackground(backgroundPanel.getBackground());
        bloodGroupCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---- Select ----" }));
        backgroundPanel.add(bloodGroupCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 220, 210, 30));

        lbEmployeeBloodGroup.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeBloodGroup.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeBloodGroup.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeBloodGroup.setText("Blood Group");
        backgroundPanel.add(lbEmployeeBloodGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 220, 130, 30));

        lbEmployeeSpecialization.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeSpecialization.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeSpecialization.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeSpecialization.setText("Specialization");
        backgroundPanel.add(lbEmployeeSpecialization, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, 130, 30));

        specializationCombo.setBackground(backgroundPanel.getBackground());
        specializationCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---- Select ----" }));
        backgroundPanel.add(specializationCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 260, 210, 30));

        lbEmployeeType9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbEmployeeType9.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeType9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbEmployeeType9.setText("mm-dd-yy");
        backgroundPanel.add(lbEmployeeType9, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 370, 130, 20));

        shiftCombo.setBackground(backgroundPanel.getBackground());
        shiftCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---- Select ----" }));
        backgroundPanel.add(shiftCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 300, 210, 30));

        lbEmployeeShift.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeShift.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeShift.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeShift.setText("Shift");
        backgroundPanel.add(lbEmployeeShift, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 130, 30));

        lbEmployeeJoiningDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeJoiningDate.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeJoiningDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeJoiningDate.setText("Joining Date");
        backgroundPanel.add(lbEmployeeJoiningDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 340, 130, 30));

        tablePanel.setBackground(backgroundPanel.getBackground());
        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Employees Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        tablePanel.setOpaque(false);
        tablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        employeeTable.setAutoCreateRowSorter(true);
        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        employeeTable.setToolTipText("Employee Details");
        employeeTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        employeeTable.setFocusable(false);
        employeeTable.setSelectionBackground(java.awt.Color.red);
        employeeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(employeeTable);

        tablePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 510, 370));

        tablePanel1.setBackground(backgroundPanel.getBackground());
        tablePanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employees", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        tablePanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        employeeTable1.setBackground(backgroundPanel.getBackground());
        employeeTable1.setForeground(new java.awt.Color(255, 255, 255));
        employeeTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        employeeTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(employeeTable1);

        tablePanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 510, 370));

        tablePanel.add(tablePanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 140, 530, 400));

        backgroundPanel.add(tablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 180, 530, 400));

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Insert_24px.png"))); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 540, 130, 40));

        btnUpdate.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Renew_24px_2.png"))); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 540, 130, 40));

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        backgroundPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 420, 600, -1));

        lbEmployeeFees.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbEmployeeFees.setForeground(new java.awt.Color(255, 255, 255));
        lbEmployeeFees.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbEmployeeFees.setText("Fees*");
        backgroundPanel.add(lbEmployeeFees, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, 130, 30));

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Delete_Document_24px.png"))); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 540, 130, 40));

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Reset_24px.png"))); // NOI18N
        btnClear.setText("RESET");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 540, 130, 40));

        joiningDateCombo.setBackground(backgroundPanel.getBackground());
        joiningDateCombo.setDateFormatString("MMM  d,  yyyy");
        joiningDateCombo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        backgroundPanel.add(joiningDateCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 340, 210, 30));

        lbBack.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbBack.setForeground(new java.awt.Color(255, 255, 255));
        lbBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Back_48px.png"))); // NOI18N
        lbBack.setText("   Back");
        lbBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbBackMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbBackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbBackMouseExited(evt);
            }
        });
        backgroundPanel.add(lbBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 130, 60));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Registration_48px.png"))); // NOI18N
        jLabel1.setText("Employees Registration");
        backgroundPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 520, 60));

        lbLogout.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbLogout.setForeground(new java.awt.Color(255, 255, 255));
        lbLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Export_48px_4.png"))); // NOI18N
        lbLogout.setText("Logout");
        lbLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbLogout.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lbLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLogoutMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbLogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbLogoutMouseExited(evt);
            }
        });
        backgroundPanel.add(lbLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 30, 140, 60));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Copyright © 2018 Geeks. All rights reserved");
        backgroundPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 670, 240, 30));

        getContentPane().add(backgroundPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void employeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseClicked
        btnAdd.setEnabled(false);
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
        employeeId = (Integer) employeeTable.getValueAt(employeeTable.getSelectedRow(), 0);
        EmployeeDAO employeeDAO = new EmployeeDAOImpl();
        EmployeeModel employeeModel = employeeDAO.getEmployeeWithId(employeeId);
        txtEmployeeName.setText(employeeModel.getName());
        txtEmployeeCnic.setText(employeeModel.getCnic());
        txtEmployeeContact.setText(employeeModel.getContact());
        txtEmployeeSalary.setText(employeeModel.getSalary().toString());
        txtEmployeeFees.setText(employeeModel.getFees().toString());
        txtAddress.setText(employeeModel.getAddress());
        employeeTypeCombo.setSelectedItem(employeeModel.getEmployeeTypeModel().getEmployeeType());
        bloodGroupCombo.setSelectedItem(employeeModel.getBloodModel().getBloodGroup());
        specializationCombo.setSelectedItem(employeeModel.getSpecializationModel().getSpecialization());
        shiftCombo.setSelectedItem(employeeModel.getShiftModel().getShift());
        if(employeeModel.getGender().equals("Male")){
            btnMale.setSelected(true);
        }
        else if(employeeModel.getGender().equals("Female")) {
            btnFemale.setSelected(true);
        }
        joiningDateCombo.setDate(employeeModel.getDateOfJoining());
    }//GEN-LAST:event_employeeTableMouseClicked
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        EmployeeModel employeeModel = new EmployeeModel();
        if((txtEmployeeName.getText().trim().isEmpty()) || (txtEmployeeCnic.getText().trim().isEmpty()) || 
                (txtEmployeeContact.getText().trim().isEmpty()) || (txtEmployeeSalary.getText().trim().isEmpty()) || 
                (txtEmployeeFees.getText().trim().isEmpty())) {
            JOptionPane.showMessageDialog(rootPane, "Please Fill Fields");
        }else{
            //if(isValidCNIC(txtEmployeeCnic.getText().trim()) == true) 
            if(txtEmployeeCnic.getText().trim().matches("[1-9]{1}[0-9]{4}-[0-9]{7}-[0-9]{1}")) {
                //if(isValidSalary(txtEmployeeSalary.getText().trim()) == true) 
                if(txtEmployeeSalary.getText().trim().matches("[1-9]{1}[0-9]*")) {
                    //if((isValidFees(txtEmployeeFees.getText().trim()) == true))
                    if(txtEmployeeFees.getText().trim().matches("[1-9]{1}[0-9]*")) {
                        if (txtEmployeeContact.getText().trim().matches("[0]+[0-9]{10}")) {
                            employeeModel.setName(txtEmployeeName.getText().trim());
                            employeeModel.setCnic(txtEmployeeCnic.getText().trim());
                            employeeModel.setContact(txtEmployeeContact.getText().trim());
                            if(btnMale.isSelected()) {
                                employeeModel.setGender(btnMale.getText());
                            }
                            else if(btnFemale.isSelected()) {
                                employeeModel.setGender(btnFemale.getText());
                            }
                            Date date = joiningDateCombo.getDate();
                            employeeModel.setDateOfJoining(new Timestamp(date.getTime()));
                            employeeModel.setSalary(Integer.parseInt(txtEmployeeSalary.getText().trim()));
                            employeeModel.setFees(Integer.parseInt(txtEmployeeFees.getText().trim()));
                            employeeModel.setAddress(txtAddress.getText().trim());
                            EmployeeTypeDAO employeeTypeDAO = new EmployeeTypeDAOImpl();
                            EmployeeTypeModel employeeTypeModel = employeeTypeDAO.getEmployeeTypeWithName(employeeTypeCombo.getSelectedItem().toString());
                            BloodDAO bloodDAO = new BloodDAOImpl();
                            BloodModel bloodModel = bloodDAO.getBloodGroupWithName(bloodGroupCombo.getSelectedItem().toString());
                            SpecializationDAO specializationDAO = new SpecializationDAOImpl();
                            SpecializationModel specializationModel = specializationDAO.getSpecializationWithName(specializationCombo.getSelectedItem().toString());
                            ShiftDAO shiftDAO = new ShiftDAOImpl();
                            ShiftModel shiftModel = shiftDAO.getShiftWithName(shiftCombo.getSelectedItem().toString());
                            employeeModel.setEmployeeTypeModel(employeeTypeModel);
                            employeeModel.setBloodModel(bloodModel);
                            employeeModel.setSpecializationModel(specializationModel);
                            employeeModel.setShiftModel(shiftModel);
                            EmployeeDAO employeeDAO = new EmployeeDAOImpl();
                            Boolean isAvailable = employeeDAO.isEmployeeAvailable(employeeModel);
                            if(isAvailable == true) {
                                JOptionPane.showMessageDialog(rootPane, "Employee is Already Exist");
                            }
                            else {
                                int row = employeeDAO.addEmployee(employeeModel);
                                if(row>0) {
                                    populateMyTable();
                                    clearFields();
                                }
                                else {
                                    JOptionPane.showMessageDialog(rootPane, "Record Not ADDED!");
                                }
                            }
                        }
                        else 
                            JOptionPane.showMessageDialog(rootPane, "invalid Contact Number");
                    }
                    else 
                        JOptionPane.showMessageDialog(rootPane, "invalid Fees");
                }
                else 
                    JOptionPane.showMessageDialog(rootPane, "invalid Salary");
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "invalid CNIC Number");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        EmployeeModel employeeModel = new EmployeeModel();
        if((txtEmployeeName.getText().trim().isEmpty()) || (txtEmployeeCnic.getText().trim().isEmpty()) || 
                (txtEmployeeContact.getText().trim().isEmpty()) || (txtEmployeeSalary.getText().trim().isEmpty()) || 
                (txtEmployeeFees.getText().trim().isEmpty())) {
            JOptionPane.showMessageDialog(rootPane, "Please Fill Fields");
        }else{
            //if(isValidCNIC(txtEmployeeCnic.getText().trim()) == true) 
            if(txtEmployeeCnic.getText().trim().matches("[1-9]{1}[0-9]{4}-[0-9]{7}-[0-9]{1}")) {
                //if(isValidSalary(txtEmployeeSalary.getText().trim()) == true) {
                if(txtEmployeeSalary.getText().trim().matches("[1-9]{1}[0-9]*")) {  
                    //if((isValidFees(txtEmployeeFees.getText().trim()) == true)){
                    if(txtEmployeeFees.getText().trim().matches("[1-9]{1}[0-9]*")) {
                        if (txtEmployeeContact.getText().trim().matches("[0]+[0-9]{10}")) {
                            employeeModel.setEmployeeId(employeeId);
                            employeeModel.setName(txtEmployeeName.getText().trim());
                            employeeModel.setCnic(txtEmployeeCnic.getText().trim());
                            employeeModel.setContact(txtEmployeeContact.getText().trim());
                            Date date = joiningDateCombo.getDate();
                            employeeModel.setDateOfJoining(new Timestamp(date.getTime()));
                            if(btnMale.isSelected()) {
                                employeeModel.setGender(btnMale.getText());
                            }
                            else if(btnFemale.isSelected()) {
                                employeeModel.setGender(btnFemale.getText());
                            }
                            employeeModel.setSalary(Integer.parseInt(txtEmployeeSalary.getText().trim()));
                            employeeModel.setFees(Integer.parseInt(txtEmployeeFees.getText().trim()));
                            employeeModel.setAddress(txtAddress.getText().trim());
                            EmployeeTypeDAO employeeTypeDAO = new EmployeeTypeDAOImpl();
                            EmployeeTypeModel employeeTypeModel = employeeTypeDAO.getEmployeeTypeWithName(employeeTypeCombo.getSelectedItem().toString());
                            BloodDAO bloodDAO = new BloodDAOImpl();
                            BloodModel bloodModel = bloodDAO.getBloodGroupWithName(bloodGroupCombo.getSelectedItem().toString());
                            SpecializationDAO specializationDAO = new SpecializationDAOImpl();
                            SpecializationModel specializationModel = specializationDAO.getSpecializationWithName(specializationCombo.getSelectedItem().toString());
                            ShiftDAO shiftDAO = new ShiftDAOImpl();
                            ShiftModel shiftModel = shiftDAO.getShiftWithName(shiftCombo.getSelectedItem().toString());
                            employeeModel.setEmployeeTypeModel(employeeTypeModel);
                            employeeModel.setBloodModel(bloodModel);
                            employeeModel.setSpecializationModel(specializationModel);
                            employeeModel.setShiftModel(shiftModel);
                            EmployeeDAO employeeDAO = new EmployeeDAOImpl();
                            //Boolean isAvailable = employeeDAO.isEmployeeAvailableForUpdate(employeeModel);
    //                        if(isAvailable == true) {
    //                            JOptionPane.showMessageDialog(rootPane, "Employee is Already Exist");
    //                        }
                            //else {
                            int row = employeeDAO.updateEmployee(employeeModel);
                            if(row>0) {
                                populateMyTable();
                                clearFields();
                                btnAdd.setEnabled(true);
                                btnDelete.setEnabled(false);
                                btnUpdate.setEnabled(false);
                            }
                            else {
                                JOptionPane.showMessageDialog(rootPane, "Record Not UPDATED!");
                            }
                        }
                        else 
                            JOptionPane.showMessageDialog(rootPane, "invalid Contact Number");
                    }
                    else 
                        JOptionPane.showMessageDialog(rootPane, "invalid Fees");
                }
                else 
                    JOptionPane.showMessageDialog(rootPane, "invalid Salary");
            }
            else {
                JOptionPane.showMessageDialog(rootPane, "invalid CNIC Number");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Integer confirm = JOptionPane.showConfirmDialog(rootPane, "Do you realy want to delete", "Delete", JOptionPane.YES_NO_OPTION);
        if(confirm == 0) {
            EmployeeModel employeeModel = new EmployeeModel();
            employeeModel.setEmployeeId(employeeId);
            EmployeeDAO employeeDAO = new EmployeeDAOImpl();
            int row = employeeDAO.deleteEmployee(employeeModel);
            if(row>0) {
                populateMyTable();
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Record Not Deleted");
        }
        clearFields();
        btnAdd.setEnabled(true);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();
        btnAdd.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed

    private void employeeTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeTypeComboActionPerformed
        if(!(employeeTypeCombo.getSelectedItem().toString().equals("Doctor")) && !(employeeTypeCombo.getSelectedIndex() == 0)){
            specializationCombo.setSelectedIndex(0);
            specializationCombo.setEnabled(false);
        }
        else {
            specializationCombo.setEnabled(true);
        }
    }//GEN-LAST:event_employeeTypeComboActionPerformed

    private void employeeTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeTable1MouseClicked

    private void lbBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbBackMouseClicked
        new MainFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbBackMouseClicked

    private void lbBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbBackMouseEntered
        lbBack.setLocation(lbBack.getX()-1,lbBack.getY());
    }//GEN-LAST:event_lbBackMouseEntered

    private void lbBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbBackMouseExited
        lbBack.setLocation(lbBack.getX()+1,lbBack.getY());
    }//GEN-LAST:event_lbBackMouseExited

    private void lbLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseClicked
        new LoginFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lbLogoutMouseClicked

    private void lbLogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseEntered
        lbLogout.setLocation(lbLogout.getX()+1,lbLogout.getY());
    }//GEN-LAST:event_lbLogoutMouseEntered

    private void lbLogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseExited
        lbLogout.setLocation(lbLogout.getX()-1,lbLogout.getY());
    }//GEN-LAST:event_lbLogoutMouseExited

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(EmployeeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new EmployeeFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JComboBox<String> bloodGroupCombo;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JRadioButton btnFemale;
    private javax.swing.JRadioButton btnMale;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTable employeeTable;
    private javax.swing.JTable employeeTable1;
    private javax.swing.JComboBox<String> employeeTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.calendar.JDateChooser joiningDateCombo;
    private javax.swing.JLabel lbBack;
    private javax.swing.JLabel lbEmployeeAddress;
    private javax.swing.JLabel lbEmployeeBloodGroup;
    private javax.swing.JLabel lbEmployeeCnic;
    private javax.swing.JLabel lbEmployeeContact;
    private javax.swing.JLabel lbEmployeeFees;
    private javax.swing.JLabel lbEmployeeGender;
    private javax.swing.JLabel lbEmployeeJoiningDate;
    private javax.swing.JLabel lbEmployeeName;
    private javax.swing.JLabel lbEmployeeSalary;
    private javax.swing.JLabel lbEmployeeShift;
    private javax.swing.JLabel lbEmployeeSpecialization;
    private javax.swing.JLabel lbEmployeeType;
    private javax.swing.JLabel lbEmployeeType9;
    private javax.swing.JLabel lbLogout;
    private javax.swing.JComboBox<String> shiftCombo;
    private javax.swing.JComboBox<String> specializationCombo;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JPanel tablePanel1;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtEmployeeCnic;
    private javax.swing.JTextField txtEmployeeContact;
    private javax.swing.JTextField txtEmployeeFees;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JTextField txtEmployeeSalary;
    // End of variables declaration//GEN-END:variables
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }
        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        return new DefaultTableModel(data, columnNames);
    }
    
    private void populateMyTable() {  
        EmployeeDAO employeeDAO = new EmployeeDAOImpl();
        ResultSet rs= employeeDAO.getAllEmployeeResultSet();
        DefaultTableModel dtm=null;
        try {
            dtm = buildTableModel(rs);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        employeeTable.setModel(dtm);
    }
    private void populateEmployeeTypeCombo() {
        EmployeeTypeDAO employeeTypeDAO = new EmployeeTypeDAOImpl();
        List<EmployeeTypeModel> allEmployeeType = employeeTypeDAO.getAllEmployeeType();
        for (EmployeeTypeModel employeeTypeModel : allEmployeeType) {
            employeeTypeCombo.addItem(employeeTypeModel.getEmployeeType());
        }
    }
    private void populateBloodGroupCombo() {
        BloodDAO bloodDAO = new BloodDAOImpl();
        List<BloodModel> allBloodGroup = bloodDAO.getAllBloodGroups();
        for (BloodModel bloodModel : allBloodGroup) {
            bloodGroupCombo.addItem(bloodModel.getBloodGroup());
        }
    }
    private void populateSpecializationCombo() {
        SpecializationDAO specializationDAO = new SpecializationDAOImpl();
        List<SpecializationModel> allSpecialization = specializationDAO.getAllSpecialization();
        for (SpecializationModel specializationModel : allSpecialization) {
            specializationCombo.addItem(specializationModel.getSpecialization());
        }
    }
    private void populateShiftCombo() {
        ShiftDAO shiftDAO = new ShiftDAOImpl();
        List<ShiftModel> allShifts = shiftDAO.getAllShifts();
        for (ShiftModel shiftModel : allShifts) {
            shiftCombo.addItem(shiftModel.getShift());
        }
    }
    private void clearFields() {
        txtEmployeeName.setText(null);
        txtEmployeeCnic.setText(null);
        txtEmployeeContact.setText(null);
        txtEmployeeSalary.setText(null);
        txtEmployeeFees.setText(null);
        txtAddress.setText(null);
        employeeTypeCombo.setSelectedIndex(0);
        bloodGroupCombo.setSelectedIndex(0);
        specializationCombo.setSelectedIndex(0);
        shiftCombo.setSelectedIndex(0);
        buttonGroup1.clearSelection();
        joiningDateCombo.setDate(null);
    }
    private Boolean isValidCNIC(String isCNICValid) {
        Boolean isSpace = false;
        Boolean isLetter = false;
        isCNICValid = txtEmployeeCnic.getText().trim();
        Boolean isValid = true;     
        try {
            for(int i = 0; i<isCNICValid.length(); i++) {
                Character ch = isCNICValid.charAt(i);
                if(Character.isSpaceChar(ch)){
                    isSpace = true;
                    System.out.println("isSpace");
                }
                if(Character.isLetter(ch)){
                    isLetter = true;
                    System.out.println("isLetter");
                }
            }
            }catch(Exception e) {
                e.printStackTrace();
            }
            if((isCNICValid.length()<13) || (isCNICValid.length()>13) || (isSpace == true) || (isLetter == true)) {
                isValid = false;
            }
        return isValid;
    }
    private Boolean isValidSalary(String isValidSalary) {
        Boolean isSpace = false;
        Boolean isLetter = false;
        isValidSalary = txtEmployeeSalary.getText().trim();
        Boolean isValid = true;
        try {
            for(int i = 0; i<isValidSalary.length(); i++) {
                Character ch = isValidSalary.charAt(i);
                if(Character.isSpaceChar(ch)) {
                    isSpace = true;
                }
                if(Character.isLetter(ch)){
                    isLetter = true;
                }
            }
            }catch(Exception e) {
                e.printStackTrace();
            }
            if((isValidSalary.length()>8) || (isSpace == true) || (isLetter == true)) {
                isValid = true;
            }
            else if((Integer.parseInt(txtEmployeeSalary.getText().trim()) < 0)) {
                isValid = false;
            }
        return isValid;
    }
    private Boolean isValidFees(String isValidFees) {
        Boolean isSpace = false;
        Boolean isLetter = false;
        Boolean isValid = true;
        isValidFees = txtEmployeeFees.getText().trim();
        try {
            for(int i = 0; i<isValidFees.length(); i++) {
                Character ch = isValidFees.charAt(i);
                if(Character.isSpaceChar(ch)) {
                    isSpace = true;
                }
                if(Character.isLetter(ch)){
                    isLetter = true;
                }
            }
            }catch(Exception e) {
                e.printStackTrace();
            }
            if((isValidFees.length() > 8) || (isSpace == true) || (isLetter == true)) {
                isValid = false;
            }
            else if ((Integer.parseInt(txtEmployeeSalary.getText().trim()) < 0)) {
                isValid = false;
            }
        return isValid;
    }
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("frameIcon.png")));
    }

    private void checkPermissions() {
        UserPermissionDAO permissionDAO = new UserPermissionDAOImpl();
        List<UserPermissionModel> permissionModels = permissionDAO.getAssignedPermissions(LoginFrame.userType);
        for (UserPermissionModel permissionModel : permissionModels) {
            if(permissionModel.getPermissionModel().getName().equals("ADD_EMPLOYEE")) {
                btnAdd.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("UPDATE_EMPLOYEE")) {
                btnUpdate.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("DELETE_EMPLOYEE")) {
                btnDelete.setVisible(true);
            }
        }
    }
}
