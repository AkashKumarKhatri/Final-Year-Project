/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ehealth.forms;

import com.ehealth.dao.Impl.RoomDAOImpl;
import com.ehealth.dao.Impl.RoomTypeDAOImpl;
import com.ehealth.dao.Impl.UserPermissionDAOImpl;
import com.ehealth.dao.Impl.WardDAOImpl;
import com.ehealth.dao.RoomDAO;
import com.ehealth.dao.RoomTypeDAO;
import com.ehealth.dao.UserPermissionDAO;
import com.ehealth.dao.WardDAO;
import com.ehealth.models.RoomModel;
import com.ehealth.models.RoomTypeModel;
import com.ehealth.models.UserPermissionModel;
import com.ehealth.models.WardModel;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akaash
 */
public class RoomFrame extends javax.swing.JFrame {

    private Integer roomId;

    /**
     * Creates new form RoomFrame2
     */
    public RoomFrame() {
        initComponents();
        setIcon();
        setTitle("Room Details");
        populateMyTable();
        populateRoomTypeCombo();
        populateWardCombo();
        btnAdd.setVisible(false);
        btnDelete.setVisible(false);
        btnUpdate.setVisible(false);
        checkPermissions();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backgroundPanel = new javax.swing.JPanel();
        roomLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        wardLabel = new javax.swing.JLabel();
        roomNoLabel = new javax.swing.JLabel();
        roomTypeLabel = new javax.swing.JLabel();
        wardCombo = new javax.swing.JComboBox<>();
        roomTypeCombo = new javax.swing.JComboBox<>();
        txtRoomNo = new javax.swing.JTextField();
        tablePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        btnclear = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Room");
        setResizable(false);

        backgroundPanel.setBackground(new java.awt.Color(29, 29, 29));
        backgroundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roomLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roomLabel.setForeground(new java.awt.Color(255, 255, 255));
        roomLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Room_32px.png"))); // NOI18N
        roomLabel.setText("Room Details");
        backgroundPanel.add(roomLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 150, 30));
        backgroundPanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 550, 10));

        wardLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        wardLabel.setForeground(new java.awt.Color(255, 255, 255));
        wardLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        wardLabel.setText("Ward");
        backgroundPanel.add(wardLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 70, 30));

        roomNoLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        roomNoLabel.setForeground(new java.awt.Color(255, 255, 255));
        roomNoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        roomNoLabel.setText("Room No");
        backgroundPanel.add(roomNoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 70, 30));

        roomTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        roomTypeLabel.setForeground(new java.awt.Color(255, 255, 255));
        roomTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        roomTypeLabel.setText("Room Type");
        backgroundPanel.add(roomTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 80, 30));

        wardCombo.setBackground(backgroundPanel.getBackground());
        backgroundPanel.add(wardCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 210, 30));

        roomTypeCombo.setBackground(backgroundPanel.getBackground());
        backgroundPanel.add(roomTypeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 210, 30));
        backgroundPanel.add(txtRoomNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 110, 30));

        tablePanel.setBackground(backgroundPanel.getBackground());
        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), "Rooms", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        tablePanel.setOpaque(false);
        tablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        roomTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        roomTable.setFocusable(false);
        roomTable.setSelectionBackground(java.awt.Color.red);
        roomTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        roomTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(roomTable);

        tablePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 510, 240));

        backgroundPanel.add(tablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 530, 270));

        btnclear.setBackground(new java.awt.Color(255, 255, 255));
        btnclear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnclear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Reset_24px.png"))); // NOI18N
        btnclear.setText("RESET");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnclear, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 190, 140, 30));

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Insert_24px.png"))); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 140, 30));

        btnUpdate.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Renew_24px_2.png"))); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 140, 30));

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ehealth/images/icons8_Delete_Document_24px.png"))); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        backgroundPanel.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, 140, 30));

        getContentPane().add(backgroundPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
    }//GEN-LAST:event_btnclearActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(txtRoomNo.getText().trim().isEmpty() == true) {
            JOptionPane.showMessageDialog(rootPane, "Please Enter Room No");
        }
        else {
            RoomModel roomModel = new RoomModel();
            roomModel.setRoomNo(txtRoomNo.getText());
            roomModel.setCreatedBy(1);
            RoomTypeDAO roomTypeDAO = new RoomTypeDAOImpl();
            RoomTypeModel roomTypeModel = roomTypeDAO.getRoomTypeIdByName(roomTypeCombo.getSelectedItem().toString());
            roomModel.setRoomTypeModel(roomTypeModel);
            WardDAO wardDAO = new WardDAOImpl();
            WardModel wardModel = wardDAO.getWardIdByName(wardCombo.getSelectedItem().toString());
            roomModel.setWardModel(wardModel);
            RoomDAO roomDAO = new RoomDAOImpl();
            if(roomDAO.isRoomAvailable(roomModel)==true) {
                JOptionPane.showMessageDialog(rootPane, "Room No is Already exist");
            }else {
                int row = roomDAO.addRoom(roomModel);
                if(row>0) {
                    txtRoomNo.setText(null);
                    populateMyTable();
                }
                else {
                    JOptionPane.showMessageDialog(null, "Record Not Added");
                }
            }
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if(txtRoomNo.getText().trim().isEmpty() == true) {
            JOptionPane.showMessageDialog(rootPane, "Please Enter Room No");
        }
        else {
            RoomModel roomModel = new RoomModel();
            roomModel.setRoomNo(txtRoomNo.getText());
            roomModel.setModifiedBy(1);
            roomModel.setRoomId(roomId);
            RoomTypeDAO roomTypeDAO = new RoomTypeDAOImpl();
            RoomTypeModel roomTypeModel = roomTypeDAO.getRoomTypeIdByName(roomTypeCombo.getSelectedItem().toString());
            roomModel.setRoomTypeModel(roomTypeModel);
            WardDAO wardDAO = new WardDAOImpl();
            WardModel wardModel = wardDAO.getWardIdByName(wardCombo.getSelectedItem().toString());
            roomModel.setWardModel(wardModel);
            RoomDAO roomDAO = new RoomDAOImpl();
            if(roomDAO.isRoomAvailable(roomModel)==true) {
                JOptionPane.showMessageDialog(rootPane, "Room No is Already exist");
            }else {
                int row = roomDAO.updateRoom(roomModel);
                if(row>0) {
                    txtRoomNo.setText(null);
                    populateMyTable();
                    btnAdd.setEnabled(true);
                    btnDelete.setEnabled(false);
                    btnUpdate.setEnabled(false);
                }
                else {
                    JOptionPane.showMessageDialog(null, "Record Not Updated");
                }
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void roomTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomTableMouseClicked
        btnAdd.setEnabled(false);
        btnDelete.setEnabled(true);
        btnUpdate.setEnabled(true);
        roomId = (Integer) roomTable.getValueAt(roomTable.getSelectedRow(), 0);
        RoomDAO roomDAO = new RoomDAOImpl();
        RoomModel roomModel = roomDAO.getRoomWithId(roomId);
        txtRoomNo.setText(roomModel.getRoomNo());
        roomTypeCombo.setSelectedItem(roomModel.getRoomTypeModel().getRoomType());
        wardCombo.setSelectedItem(roomModel.getWardModel().getName());
    }//GEN-LAST:event_roomTableMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Integer confirm = JOptionPane.showConfirmDialog(rootPane, "Do you realy want to delete", "Delete", JOptionPane.YES_NO_OPTION);
        if(confirm == 0) {
            RoomModel roomModel = new RoomModel();
            roomModel.setRoomId(roomId);
            RoomDAO roomDAO = new RoomDAOImpl();
            int row = roomDAO.deleteRoom(roomModel);
            if(row>0) {
                txtRoomNo.setText(null);
                populateMyTable();
                btnAdd.setEnabled(true);
                btnDelete.setEnabled(false);
                btnUpdate.setEnabled(false);
            }
            else {
                JOptionPane.showMessageDialog(null, "Record Not DELETED");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RoomFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RoomFrame().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnclear;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel roomLabel;
    private javax.swing.JLabel roomNoLabel;
    private javax.swing.JTable roomTable;
    private javax.swing.JComboBox<String> roomTypeCombo;
    private javax.swing.JLabel roomTypeLabel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTextField txtRoomNo;
    private javax.swing.JComboBox<String> wardCombo;
    private javax.swing.JLabel wardLabel;
    // End of variables declaration//GEN-END:variables
    
    private void populateMyTable() {
       
        RoomDAO roomImpl= new RoomDAOImpl();
        ResultSet rs= roomImpl.getAllRoomResultSet();
        DefaultTableModel dtm=null;
        try {
            dtm = buildTableModel(rs);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        roomTable.setModel(dtm);
    }
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        // names of columns
        Vector<String> columnNames = new Vector<String>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }
        // data of the table
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        while (rs.next()) {
            Vector<Object> vector = new Vector<Object>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                vector.add(rs.getObject(columnIndex));
            }
            data.add(vector);
        }
        return new DefaultTableModel(data, columnNames);
    }
    private void populateRoomTypeCombo() {
        RoomTypeDAO roomTypeDAO = new RoomTypeDAOImpl();
        List<RoomTypeModel> allRoomTypes = roomTypeDAO.getAllRoomTypes();
        for (RoomTypeModel allRoomType : allRoomTypes) {
            roomTypeCombo.addItem(allRoomType.getRoomType());
        }
    }
    private void populateWardCombo() {
        WardDAO wardDAO = new WardDAOImpl();
        List<WardModel> wardModels = wardDAO.getAllWards();
        for (WardModel wardModel : wardModels) {
            wardCombo.addItem(wardModel.getName());
        }
    }
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("frameIcon.png")));
    }

    private void checkPermissions() {
        UserPermissionDAO permissionDAO = new UserPermissionDAOImpl();
        List<UserPermissionModel> permissionModels = permissionDAO.getAssignedPermissions(LoginFrame.userType);
        for (UserPermissionModel permissionModel : permissionModels) {
            if(permissionModel.getPermissionModel().getName().equals("ADD_ROOM")) {
                btnAdd.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("UPDATE_ROOM")) {
                btnUpdate.setVisible(true);
            }
            if(permissionModel.getPermissionModel().getName().equals("DELETE_ROOM")) {
                btnDelete.setVisible(true);
            }
        }
    }
}
